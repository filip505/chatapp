{"version":3,"sources":["../src/main/socket.js"],"names":["Socket","msg","Promise","resolve","reject","connections","receiverId","send","JSON","stringify","server","http","createServer","request","response","connection","listen","wsServer","WebSocketServer","httpServer","on","accept","origin","message","type","parse","utf8Data","tokenRepository","findOne","id","token","personId","console","log","error","close"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;IAEMA,M,GAMJ,kBAAc;AAAA;;AAAA;;AAAA,0CAJG,4BAAc,QAAd,CAIH;;AAAA,2CAHI,4BAAc,OAAd,CAGJ;;AAAA,sCAFD,IAEC;;AAAA,uCAqCA,UAACC,GAAD;AAAA,WAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtD,MAAA,KAAI,CAACC,WAAL,CAAiBJ,GAAG,CAACK,UAArB,EAAiCC,IAAjC,CAAsCC,IAAI,CAACC,SAAL,CAAeR,GAAf,CAAtC;AACD,KAFsB,CAAT;AAAA,GArCA;;AACZ,OAAKI,WAAL,GAAmB,EAAnB;;AACA,MAAMK,MAAM,GAAGC,cAAKC,YAAL,CAAkB,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B,CAC5D;AACA;AACD,GAHc,CAAf;;AAIA,OAAKC,UAAL,GAAkBL,MAAM,CAACM,MAAP,CAAc,IAAd,EAAoB,YAAY,CAAG,CAAnC,CAAlB;AAEA,MAAMC,QAAQ,GAAG,IAAIC,iBAAJ,CAAoB;AACnCC,IAAAA,UAAU,EAAET;AADuB,GAApB,CAAjB;AAIAO,EAAAA,QAAQ,CAACG,EAAT,CAAY,SAAZ,EAAuB,UAACP,OAAD,EAAa;AAClC,QAAIE,UAAU,GAAGF,OAAO,CAACQ,MAAR,CAAe,IAAf,EAAqBR,OAAO,CAACS,MAA7B,CAAjB;AAEAP,IAAAA,UAAU,CAACK,EAAX,CAAc,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAyB,iBAAOG,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACnBA,OAAO,CAACC,IAAR,KAAiB,MADE;AAAA;AAAA;AAAA;;AAAA;AAGbvB,gBAAAA,GAHa,GAGPO,IAAI,CAACiB,KAAL,CAAWF,OAAO,CAACG,QAAnB,CAHO;AAAA;AAAA,uBAIC,KAAI,CAACC,eAAL,CAAqBC,OAArB,CAA6B;AAAEC,kBAAAA,EAAE,EAAE5B,GAAG,CAAC6B;AAAV,iBAA7B,CAJD;;AAAA;AAIbA,gBAAAA,KAJa;AAKnBjB,gBAAAA,OAAO,CAACkB,QAAR,GAAmBD,KAAK,CAACC,QAAzB;AACA,gBAAA,KAAI,CAAC1B,WAAL,CAAiByB,KAAK,CAACC,QAAvB,IAAmChB,UAAnC;AANmB;AAAA;;AAAA;AAAA;AAAA;AAQnBiB,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAlB,gBAAAA,UAAU,CAACR,IAAX,CAAgBC,IAAI,CAACC,SAAL,CAAe;AAAEyB,kBAAAA,KAAK,EAAE;AAAT,iBAAf,CAAhB;AACAnB,gBAAAA,UAAU,CAACoB,KAAX;;AAVmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzB;;AAAA;AAAA;AAAA;AAAA;AAcApB,IAAAA,UAAU,CAACK,EAAX,CAAc,OAAd,EAAuB,UAACL,UAAD,EAAgB;AACrC,aAAO,KAAI,CAACV,WAAL,CAAiBQ,OAAO,CAACkB,QAAzB,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCpB,OAAO,CAACkB,QAA1C;AACD,KAHD;AAID,GArBD;AAuBD,C;;eAQY,IAAI/B,MAAJ,E","sourcesContent":["import { server as WebSocketServer } from 'websocket'\nimport { getRepository } from 'typeorm'\nimport http from 'http'\n\nclass Socket {\n\n  userRepository = getRepository('person')\n  tokenRepository = getRepository('token')\n  connection = null\n\n  constructor() {\n    this.connections = {}\n    const server = http.createServer(function (request, response) {\n      // process HTTP request. Since we're writing just WebSockets\n      // server we don't have to implement anything.\n    });\n    this.connection = server.listen(1337, function () { });\n\n    const wsServer = new WebSocketServer({\n      httpServer: server\n    });\n\n    wsServer.on('request', (request) => {\n      var connection = request.accept(null, request.origin);\n\n      connection.on('message', async (message) => {\n        if (message.type === 'utf8') {\n          try {\n            const msg = JSON.parse(message.utf8Data)\n            const token = await this.tokenRepository.findOne({ id: msg.token })\n            request.personId = token.personId\n            this.connections[token.personId] = connection\n          } catch (error) {\n            console.log('error')\n            connection.send(JSON.stringify({ error: 'invalid token' }))\n            connection.close()\n          }\n        }\n      });\n      connection.on('close', (connection) => {\n        delete this.connections[request.personId]\n        console.log('connection removed', request.personId)\n      });\n    })\n\n  }\n\n  sendMessage = (msg) => new Promise((resolve, reject) => {\n    this.connections[msg.receiverId].send(JSON.stringify(msg))\n  });\n\n}\n\nexport default new Socket()"],"file":"socket.js"}