{"version":3,"sources":["../src/main/server.js"],"names":["port","synchronize","fixtures","init","app","disable","use","bodyParser","json","authMiddleware","routers","get","req","res","send","http","createServer","listen","server","closeAll","console","log","connection","close","socket","process","env","NODE_ENV"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;0BAEe,iBAAOA,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIP,8BAAgBC,WAAhB,CAA4B,IAA5B,CAJO;;AAAA;AAKbC,8BAASC,IAAT,GALa,CAMb;AAGA;;;AAEIC,YAAAA,GAXS,GAWH,uBAXG;AAYbA,YAAAA,GAAG,CAACC,OAAJ,CAAY,MAAZ;AACAD,YAAAA,GAAG,CAACE,GAAJ,CAAQ,oBAAR;AACAF,YAAAA,GAAG,CAACE,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAJ,YAAAA,GAAG,CAACE,GAAJ,CAAQG,0BAAR;AACAL,YAAAA,GAAG,CAACE,GAAJ,CAAQI,eAAR;AACAN,YAAAA,GAAG,CAACO,GAAJ,CAAQ,MAAR,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAY;AAC1BA,cAAAA,GAAG,CAACC,IAAJ,CAAS,MAAT;AACD,aAFD;AAGAV,YAAAA,GAAG,GAAGW,cAAKC,YAAL,CAAkBZ,GAAlB,CAAN;AApBa;AAAA,mBAsBQA,GAAG,CAACa,MAAJ,CAAWjB,IAAX,CAtBR;;AAAA;AAsBPkB,YAAAA,MAtBO;;AAwBbA,YAAAA,MAAM,CAACC,QAAP,GAAkB,YAAM;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAC,cAAAA,UAAU,CAACC,KAAX;AACAL,cAAAA,MAAM,CAACK,KAAP;AACAC,cAAAA,MAAM,CAACD,KAAP;AACD,aALD;;AAOAH,YAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BrB,IAAvC;AACAoB,YAAAA,OAAO,CAACC,GAAR,CAAY,gBAAgBI,OAAO,CAACC,GAAR,CAAYC,QAAxC;AAjCa,6CAkCNT,MAlCM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import '@babel/polyfill'\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport http from 'http'\nimport  { getConnection } from 'typeorm'\nimport { authMiddleware, oauthMiddleware } from './middleware'\nimport routers from './routes'\nimport fixtures from './fixtures'\nimport cors from 'cors'\n\nexport default async (port) => {\n\n  //await connection.runMigrations()\n\n  await getConnection().synchronize(true);\n  fixtures.init()\n  // if (process.env.NODE_ENV === 'test') {\n\n\n  // }\n  \n  let app = express()\n  app.disable('etag');\n  app.use(cors())\n  app.use(bodyParser.json())\n  app.use(authMiddleware)\n  app.use(routers)\n  app.get('ping', (req, res)=>{\n    res.send('pong')\n  })\n  app = http.createServer(app)\n\n  const server = await app.listen(port)\n\n  server.closeAll = () => {\n    console.log('close all')\n    connection.close()\n    server.close()\n    socket.close()\n  }\n\n  console.log('___________________________')\n  console.log('server started at port' + port)\n  console.log('server env ' + process.env.NODE_ENV)\n  return server\n}"],"file":"server.js"}