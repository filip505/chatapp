{"version":3,"sources":["../../src/main/services/auth.service.js"],"names":["AuthService","email","password","key","oneSignalId","personRepository","findOne","user","tokenRepository","save","person","token","console","log","id","status","body","exsists","tokenDb","personId","role"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;IAEMA,W;;;;;;8CACe,4BAAc,QAAd,C;;6CACD,4BAAc,OAAd,C;;;;;;;;+CAENC,K,EAAOC,Q,EAAUC,G,EAAKC,W;;;;;;;uBACb,KAAKC,gBAAL,CAAsBC,OAAtB,CAA8B;AAAEL,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,QAAQ,EAARA;AAAT,iBAA9B,C;;;AAAbK,gBAAAA,I;;qBACFA,I;;;;;;uBACkB,KAAKC,eAAL,CAAqBC,IAArB,CAA0B;AAAEC,kBAAAA,MAAM,EAAEH;AAAV,iBAA1B,C;;;AAAdI,gBAAAA,K;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BT,WAA3B;;uBACM,KAAKC,gBAAL,CAAsBI,IAAtB,mBAAgCF,IAAhC;AAAsCJ,kBAAAA,GAAG,EAAHA,GAAtC;AAA2CC,kBAAAA,WAAW,EAAXA;AAA3C,mB;;;mEACMG,I;AAAMI,kBAAAA,KAAK,EAAEA,KAAK,CAACG;;;;sBAGzB;AAAEC,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE;AAArB,iB;;;;;;;;;;;;;;;;;;;;;gDAIGT,I;;;;;;AACXA,gBAAAA,IAAI,CAACO,EAAL,GAAU,eAAV;;uBACsB,KAAKT,gBAAL,CAAsBC,OAAtB,CAA8B;AAAEL,kBAAAA,KAAK,EAAEM,IAAI,CAACN;AAAd,iBAA9B,C;;;AAAhBgB,gBAAAA,O;;qBACFA,O;;;;;sBACI;AAAEF,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE;AAArB,iB;;;;uBAEF,KAAKX,gBAAL,CAAsBI,IAAtB,CAA2BF,IAA3B,C;;;kDACCA,I;;;;;;;;;;;;;;;;;;;;;gDAGWI,K;;;;;;;;uBAEM,KAAKH,eAAL,CAAqBF,OAArB,CAA6B;AAAEQ,kBAAAA,EAAE,EAAEH;AAAN,iBAA7B,C;;;AAAhBO,gBAAAA,O;;uBACa,KAAKb,gBAAL,CAAsBC,OAAtB,CAA8B;AAAEQ,kBAAAA,EAAE,EAAEI,OAAO,CAACC;AAAd,iBAA9B,C;;;AAAbZ,gBAAAA,I;AACNA,gBAAAA,IAAI,CAACa,IAAL,GAAY,MAAZ;kDACOb,I;;;;;AAEUK,gBAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB,SAArB;;;;;;;;;;;;;;;;;;;;;eAIR,IAAIb,WAAJ,E","sourcesContent":["import { getRepository } from 'typeorm'\nimport { v1 } from 'uuid'\n\nclass AuthService {\n  personRepository = getRepository('person')\n  tokenRepository = getRepository('token')\n\n  async login(email, password, key, oneSignalId) {\n    const user = await this.personRepository.findOne({ email, password })\n    if (user) {\n      const token = await this.tokenRepository.save({ person: user })\n      console.log('oneSignalID', oneSignalId)\n      await this.personRepository.save({ ...user, key, oneSignalId })\n      return { ...user, token: token.id }\n    }\n    else {\n      throw { status: 403, body: 'invalid user or password' }\n    }\n  }\n\n  async signUp(user) {\n    user.id = v1()\n    const exsists = await this.personRepository.findOne({ email: user.email })\n    if (exsists) {\n      throw { status: 409, body: 'email allready registered' }\n    }\n    await this.personRepository.save(user)\n    return user\n  }\n\n  async validateToken(token) {\n    try {\n      const tokenDb = await this.tokenRepository.findOne({ id: token })\n      const user = await this.personRepository.findOne({ id: tokenDb.personId })\n      user.role = 'user'\n      return user\n    }\n    catch (exceptin) { console.log('token', 'invalid') }\n  }\n}\n\nexport default new AuthService()"],"file":"auth.service.js"}