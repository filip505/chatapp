{"version":3,"sources":["../../src/main/services/conversation.service.js"],"names":["ConversationService","number","user","personRepository","findOne","companion","status","body","subjectRepository","where","person","relations","limit","subject","console","log","conversation","conversationRepository","save","updatedAt","Date","toLocaleString","subjects","companionId","id","find","conversations","map","response","messageCount","filter","lastMessageId"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;IAEMA,mB;;;;;;oDACqB,4BAAc,cAAd,C;;+CACL,4BAAc,SAAd,C;;8CACD,4BAAc,QAAd,C;;+CACC,4BAAc,SAAd,C;;;;;;;;+CAEUC,M,EAAQC,I;;;;;;;uBACZ,KAAKC,gBAAL,CAAsBC,OAAtB,CAA8B;AAAEH,kBAAAA,MAAM,EAANA;AAAF,iBAA9B,C;;;AAAlBI,gBAAAA,S;;oBACDA,S;;;;;sBAAiB;AAAEC,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE;AAArB,iB;;;;uBAEA,KAAKC,iBAAL,CAAuBJ,OAAvB,CAA+B;AACnDK,kBAAAA,KAAK,EAAE;AACLJ,oBAAAA,SAAS,EAATA,SADK;AAELK,oBAAAA,MAAM,EAAER;AAFH,mBAD4C;AAKnDS,kBAAAA,SAAS,EAAE,CAAC,cAAD,CALwC;AAMnDC,kBAAAA,KAAK,EAAE;AAN4C,iBAA/B,C;;;AAAhBC,gBAAAA,O;;qBAUFA,O;;;;;AACFC,gBAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCF,OAAO,CAACG,YAA5C;AACAA,gBAAAA,YAAY,GAAGH,OAAO,CAACG,YAAvB;;;;;AAGAF,gBAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;uBACqB,KAAKE,sBAAL,CAA4BC,IAA5B,CAAiC;AACpDC,kBAAAA,SAAS,EAAE,IAAIC,IAAJ,GAAWC,cAAX,EADyC;AAEpDC,kBAAAA,QAAQ,EAAE,CACR;AACEjB,oBAAAA,SAAS,EAATA,SADF;AAEEK,oBAAAA,MAAM,EAAER;AAFV,mBADQ,EAKR;AACEQ,oBAAAA,MAAM,EAAEL,SADV;AAEEA,oBAAAA,SAAS,EAAEH;AAFb,mBALQ;AAF0C,iBAAjC,C;;;AAArBc,gBAAAA,Y;;;AAeFA,gBAAAA,YAAY,CAACO,WAAb,GAA2BlB,SAAS,CAACmB,EAArC;AACAR,gBAAAA,YAAY,CAACX,SAAb,GAAyBA,SAAzB;iDACOW,Y;;;;;;;;;;;;;;;;;;;;;gDAGcd,I;;;;;;;uBACA,KAAKM,iBAAL,CAAuBiB,IAAvB,CAA4B;AAC/ChB,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,MAAM,EAAER;AADH,mBADwC;AAI/CS,kBAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,cAAd;AAJoC,iBAA5B,C;;;AAAjBW,gBAAAA,Q;AAOEI,gBAAAA,a,GAAgBJ,QAAQ,CAACK,GAAT,CAAa,UAACd,OAAD,EAAa;AAC9C,sBAAMe,QAAQ,GAAGf,OAAO,CAACG,YAAzB;AACAY,kBAAAA,QAAQ,CAACvB,SAAT,GAAqBQ,OAAO,CAACR,SAA7B;AACAuB,kBAAAA,QAAQ,CAACL,WAAT,GAAuBV,OAAO,CAACR,SAAR,CAAkBmB,EAAzC;AACAI,kBAAAA,QAAQ,CAACC,YAAT,GAAwBhB,OAAO,CAACgB,YAAhC;AACA,yBAAOD,QAAP;AACD,iBANqB,EAMnBE,MANmB,CAMZ,UAACd,YAAD;AAAA,yBAAkBA,YAAY,CAACe,aAA/B;AAAA,iBANY,C;kDAQfL,a;;;;;;;;;;;;;;;;;;;;;eAII,IAAI1B,mBAAJ,E","sourcesContent":["import { getRepository } from 'typeorm'\n\nclass ConversationService {\n  conversationRepository = getRepository('conversation')\n  messageRepository = getRepository('message')\n  personRepository = getRepository('person')\n  subjectRepository = getRepository('subject')\n\n  async getOrCreateConversation(number, user) {\n    const companion = await this.personRepository.findOne({ number })\n    if (!companion) throw { status: 404, body: 'companion not found' }\n\n    const subject = await this.subjectRepository.findOne({\n      where: {\n        companion,\n        person: user\n      },\n      relations: ['conversation'],\n      limit: 1\n    })\n\n    let conversation\n    if (subject) {\n      console.log('getting conversation', subject.conversation)\n      conversation = subject.conversation\n    }\n    else {\n      console.log('creating conversation')\n      conversation = await this.conversationRepository.save({\n        updatedAt: new Date().toLocaleString(),\n        subjects: [\n          {\n            companion,\n            person: user\n          },\n          {\n            person: companion,\n            companion: user\n          }\n        ],\n      })\n    }\n    \n    conversation.companionId = companion.id\n    conversation.companion = companion\n    return conversation\n  }\n\n  async getConversations(user) {\n    let subjects = await this.subjectRepository.find({\n      where: {\n        person: user\n      },\n      relations: ['companion', 'conversation']\n    })\n    \n    const conversations = subjects.map((subject) => {\n      const response = subject.conversation\n      response.companion = subject.companion\n      response.companionId = subject.companion.id\n      response.messageCount = subject.messageCount\n      return response\n    }).filter((conversation) => conversation.lastMessageId)\n  \n    return conversations\n  }\n}\n\nexport default new ConversationService()"],"file":"conversation.service.js"}