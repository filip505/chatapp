{"version":3,"sources":["../../src/main/services/message.service.js"],"names":["MessageService","conversationId","number","text","user","date","Date","personRepository","findOne","receiver","status","body","subjectRepository","where","personId","id","relations","subject","conversation","message","receiverId","senderId","messageRepository","save","createdAt","lastMessageId","companionId","conversationRepository","messageCount","person","find","messages","length","delete"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;IAEMA,c;;;;;;+CACgB,4BAAc,SAAd,C;;+CACA,4BAAc,SAAd,C;;8CACD,4BAAc,QAAd,C;;oDACM,4BAAc,cAAd,C;;;;;;;;+CAELC,c,EAAgBC,M,EAAQC,I,EAAMC,I;;;;;;AAC1CC,gBAAAA,I,GAAO,IAAIC,IAAJ,E,EAAU;;;uBAEA,KAAKC,gBAAL,CAAsBC,OAAtB,CAA8B;AAAEN,kBAAAA,MAAM,EAANA;AAAF,iBAA9B,C;;;AAAjBO,gBAAAA,Q;;oBACDA,Q;;;;;sBAAgB;AAAEC,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE,yBAArB,CAErB;AACA;;AAHqB,iB;;;;uBAKC,KAAKC,iBAAL,CAAuBJ,OAAvB,CAA+B;AACnDK,kBAAAA,KAAK,EAAE;AACLC,oBAAAA,QAAQ,EAAEL,QAAQ,CAACM,EADd;AAELd,oBAAAA,cAAc,EAAdA;AAFK,mBAD4C;AAKnDe,kBAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,cAAd;AALwC,iBAA/B,C;;;AAAhBC,gBAAAA,O;AAQEC,gBAAAA,Y,GAAiBD,O,CAAjBC,Y;;oBACHD,O;;;;;sBAAe;AAAEP,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE;AAArB,iB;;;AAEhBQ,gBAAAA,O,GAAU;AAAEC,kBAAAA,UAAU,EAAEX,QAAQ,CAACM,EAAvB;AAA2BZ,kBAAAA,IAAI,EAAJA,IAA3B;AAAiCkB,kBAAAA,QAAQ,EAAEjB,IAAI,CAACW;AAAhD,iB;;uBACE,KAAKO,iBAAL,CAAuBC,IAAvB,mBAAiCJ,OAAjC;AAA0CD,kBAAAA,YAAY,EAAZA,YAA1C;AAAwDM,kBAAAA,SAAS,EAAEnB;AAAnE,mB;;;AAAhBc,gBAAAA,O;AAEAD,gBAAAA,YAAY,CAACO,aAAb,GAA6BN,OAAO,CAACJ,EAArC;AACAG,gBAAAA,YAAY,CAACQ,WAAb,GAA2BtB,IAAI,CAACF,MAAhC;;uBAEM,KAAKyB,sBAAL,CAA4BJ,IAA5B,CAAiCL,YAAjC,C;;;;uBACA,KAAKN,iBAAL,CAAuBW,IAAvB,mBAAiCN,OAAjC;AAA0CW,kBAAAA,YAAY,EAAEX,OAAO,CAACW,YAAR,GAAuB;AAA/E,mB;;;iDAECT,O;;;;;;;;;;;;;;;;;;;;;gDAGSlB,c,EAAgB4B,M;;;;;;;uBACV,KAAKjB,iBAAL,CAAuBJ,OAAvB,CAA+B;AACnDK,kBAAAA,KAAK,EAAE;AACLZ,oBAAAA,cAAc,EAAdA,cADK;AAEL4B,oBAAAA,MAAM,EAANA;AAFK;AAD4C,iBAA/B,C;;;AAAhBZ,gBAAAA,O;;oBAODA,O;;;;;sBAAe;AAAEP,kBAAAA,MAAM,EAAE,GAAV;AAAeC,kBAAAA,IAAI,EAAE;AAArB,iB;;;;uBAEG,KAAKW,iBAAL,CAAuBQ,IAAvB,CAA4B;AACjDjB,kBAAAA,KAAK,EAAE;AACLZ,oBAAAA,cAAc,EAAdA,cADK;AAELmB,oBAAAA,UAAU,EAAES,MAAM,CAACd;AAFd;AAD0C,iBAA5B,C;;;AAAjBgB,gBAAAA,Q;;sBAOFA,QAAQ,CAACC,MAAT,GAAkB,C;;;;;;uBACd,KAAKV,iBAAL,CAAuBW,MAAvB,CAA8BF,QAA9B,C;;;;uBACA,KAAKnB,iBAAL,CAAuBW,IAAvB,mBAAiCN,OAAjC;AAA0CW,kBAAAA,YAAY,EAAE;AAAxD,mB;;;kDAEDG,Q;;;;;;;;;;;;;;;;;;;;;eAII,IAAI/B,cAAJ,E","sourcesContent":["import { getRepository } from 'typeorm'\n\nclass MessageService {\n  messageRepository = getRepository('message')\n  subjectRepository = getRepository('subject')\n  personRepository = getRepository('person')\n  conversationRepository = getRepository('conversation')\n\n  async createMessage(conversationId, number, text, user) {\n    const date = new Date()//.format(\"YYYY-MM-DD HH:mm\")\n\n    const receiver = await this.personRepository.findOne({ number })\n    if (!receiver) throw { status: 404, body: 'invalid receiver number' }\n\n    // let conversation = await this.conversationRepository.findOne({ id: conversationId })\n    // if (!conversation) throw { status: 404, body: 'invalid conversation id' }\n\n    const subject = await this.subjectRepository.findOne({\n      where: {\n        personId: receiver.id,\n        conversationId\n      },\n      relations: ['companion', 'conversation']\n    })\n\n    const { conversation } = subject\n    if (!subject) throw { status: 404, body: 'invalid conversation id' }\n\n    let message = { receiverId: receiver.id, text, senderId: user.id }\n    message = await this.messageRepository.save({ ...message, conversation, createdAt: date })\n\n    conversation.lastMessageId = message.id\n    conversation.companionId = user.number\n\n    await this.conversationRepository.save(conversation)\n    await this.subjectRepository.save({ ...subject, messageCount: subject.messageCount + 1 })\n\n    return message;\n  }\n\n  async getMessages(conversationId, person) {\n    const subject = await this.subjectRepository.findOne({\n      where: {\n        conversationId,\n        person\n      },\n    })\n\n    if (!subject) throw { status: 404, body: 'invalid conversation id' }\n\n    const messages = await this.messageRepository.find({\n      where: {\n        conversationId,\n        receiverId: person.id\n      }\n    })\n\n    if (messages.length > 0) {\n      await this.messageRepository.delete(messages)\n      await this.subjectRepository.save({ ...subject, messageCount: 0 })\n    }\n    return messages\n  }\n}\n\nexport default new MessageService()"],"file":"message.service.js"}